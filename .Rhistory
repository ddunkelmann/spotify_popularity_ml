release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X_train <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
ggplot(X_traing, aes(popularity, duration_ms)) +
geom_point()
ggplot(X_train, aes(popularity, duration_ms)) +
geom_point()
ggplot(X_train, aes(popularity, duration_ms)) +
geom_point(alpha = 0.3)
ggplot(X_train, aes(duration_ms)) +
geom_hist()
ggplot(X_train, aes(duration_ms)) +
geom_histogrm()
ggplot(X_train, aes(duration_ms)) +
geom_histogram()
colnames(X_train)
ggplot(X_train, (y = popularity, x = danceability)) +
geom_point(alpha = 0.5)
ggplot(X_train, (y = popularity, x = danceability)) +
geom_point(alpha = 0.5)
ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.5)
ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1)
ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
ggplot(X_train, aes(y = popularity, x = energy)) +
geom_point(alpha = 0.1) +
geom_smooth()
colnames(X_train)
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_energy <- ggplot(X_train, aes(y = popularity, x = energy)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_loud <- ggplot(X_train, aes(y = popularity, x = loudness)) +
geom_point(alpha = 0.1) +
geom_smooth()
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
library(ggplot2)
library(ggpubr)
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_energy <- ggplot(X_train, aes(y = popularity, x = energy)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
# Libraries
library(tidyverse)
install.packages(c("ape", "backports", "BH", "bitops", "blob", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "DescTools", "digest", "dplyr", "DT", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "fs", "generics", "GGally", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "modelr", "mvtnorm", "network", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reprex", "reshape2", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "Rttf2pt1", "rvest", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ape", "backports", "BH", "bitops", "blob", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "DescTools", "digest", "dplyr", "DT", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "fs", "generics", "GGally", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "modelr", "mvtnorm", "network", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reprex", "reshape2", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "Rttf2pt1", "rvest", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ape", "backports", "BH", "bitops", "blob", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "DescTools", "digest", "dplyr", "DT", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "fs", "generics", "GGally", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "modelr", "mvtnorm", "network", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reprex", "reshape2", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "Rttf2pt1", "rvest", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2"))
library(tidyverse)
library(readr)
install.packages(c("data.table", "later", "network"))
# Libraries
library(tidyverse)
library(readr)
# Libraries
library(tidyverse)
library(readr)
library(ggpubr)
library(ggpubr)
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_dance
library(caret)
install.packages("caret")
library(caret)
?createDataPartition
createFolds(X_train, k = 5, p = 0.8)
createFolds(X_train, k = 5,)
createFolds(X_train, k = 5)
createFolds(X_train, k = 10)
createFolds(X_train, k = 3)
ncol(X_train)
nrow(X_train+)
nrow(X_train)
createFolds(nrow(X_train), k = 3)
rnorm(21)
createFolds(rnorm(21), k = 3)
1:nrow(X_train)
createFolds(1:nrow(X_train), k = 3)
createFolds(1:nrow(X_train), k = 5)
for(x in folds){
print(x)
}
folds <- createFolds(1:nrow(X_train), k = 5)
for(x in folds){
print(x)
}
for(x in folds){
print(X_train[x])
}
for(x in folds){
print(X_train[,:x])
}
for(x in folds){
print(X_train[:x])
}
for(x in folds){
print(X_train[,x])
}
for(x in folds){
print(X_train[x,])
}
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
f_index == 1:nrow(X)
f_index == 1:nrow(X)
for(f_index in folds){
X_train <- X[f_index,]
f_index == 1:nrow(X)
}
for(f_index in folds){
X_train <- X[f_index,]
print(f_index == 1:nrow(X))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train)
}
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print("Got Split with", head(f_index))
}
head(f_index)
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(concat("Got Split with", head(f_index)))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(paste("Got Split with", head(f_index)))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(paste("Got Split with", paste(head(f_index))))
}
paste(head(f_index))
paste(unlist(head(f_index)))
head(f_index)
paste0(head(f_index))
print(paste("Got Split with", head(f_index)))
head(f_index)
unlist(head(f_index))
paste(head(f_index), collapse = "-")
print(paste("Got Split with", paste(head(f_index), collapse = "-")))
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(paste("Got Split with", paste(head(f_index), collapse = "-")))
}
folds <- createFolds(1:nrow(X), k = 5)
# Libraries
library(tidyverse)
library(readr)
library(caret)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# 1. Load Data
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
train <- read_csv("data/train.csv")
artists <- read_csv("data/artists.csv")
test <- read_csv("data/test.csv")
colnames(train)
colnames(artists)
# 2.1. Edit Train Data
edit_train <- train
# Helper Function for getting a specific value from the string-arrays in the data
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_string[returned_nr])
}
# -- Split Artists Column and return the first given Artist ID
edit_train$id_artists <- sapply(train$id_artists, get_first_value_from_string, returned_nr = 1)
# Get the first genre Value
edit_artists <- artists
edit_artists$genres <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
?featurePlot
View(X)
y <- edit_train$popularity
featurePlot(x = X, y = y)
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity, duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
training <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
# K-fold für die Trainingsdaten
fitControl <- trainControl(method = "repeatedcv",
# Fünf Splits ...
number = 5,
# ... Zehn mal wiederholt
repeats = 10)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
View(training)
colnames(training)
edit_artists <- edit_artists %>%
select(-genres) %>%
rename("artist_popularity" = "popularity")
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity, duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
training <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
colnames(training)
# K-fold für die Trainingsdaten
fitControl <- trainControl(method = "repeatedcv",
# Fünf Splits ...
number = 5,
# ... Zehn mal wiederholt
repeats = 10)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
training[is.na(training$popularity), ]
training[is.na(training$popularity)]
training[, is.na(training$popularity)]
training[is.na(training$popularity), ]
training[is.na(training), ]
is.na(training)
training[is.na(training), ]
nrow(is.na(training))
training[rowSums(is.na(training)) > 0,]
# Remove NA Information => Imputate later
training <- training[rowSums(is.na(training)) == 0, ]
# K-fold für die Trainingsdaten
fitControl <- trainControl(method = "repeatedcv",
# Fünf Splits ...
number = 5,
# ... Zehn mal wiederholt
repeats = 10)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE)
gbmFit1
# K-fold für die Trainingsdaten
fitControl <- trainControl(method = "repeatedcv",
# Fünf Splits ...
number = 5,
# ... Zehn mal wiederholt
repeats = 10)
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(3, 5, 9),
n.trees = (1:7)*150,
shrinkage = 0.1,
n.minobsinnode = 20)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(3, 5, 9),
n.trees = (1:7)*150,
shrinkage = 0.1,
n.minobsinnode = 20)
View(gbmGrid)
# K-fold für die Trainingsdaten
fitControl <- trainControl(method = "repeatedcv",
# Fünf Splits ...
number = 5,
# ... Zehn mal wiederholt
repeats = 5)
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(3, 5, 9),
n.trees = (1:7)*150,
shrinkage = 0.1,
n.minobsinnode = 20)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
install.packages("doInstall")
install.packages("doParallel")
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(3, 5, 9),
n.trees = (1:2)*150,
shrinkage = 0.1,
n.minobsinnode = 20)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9, 12),
n.trees = (2:4)*150,
shrinkage = 0.1,
n.minobsinnode = 20)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9),
n.trees = c(300),
shrinkage = 0.1,
n.minobsinnode = 20)
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9),
n.trees = c(300),
shrinkage = c(0.1, 0.2, 0.3),
n.minobsinnode = 20)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9),
n.trees = c(300),
shrinkage = c(0.01, 0.05, 0.1),
n.minobsinnode = 20)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9),
n.trees = c(300),
shrinkage = c(0.05, 0.06, 0.07),
n.minobsinnode = 20)
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9),
n.trees = c(300),
shrinkage = c(0.06),
n.minobsinnode = c(10, 20, 30))
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
# Parameter zum Testen
gbmGrid <-  expand.grid(interaction.depth = c(9),
n.trees = c(300),
shrinkage = c(0.06),
n.minobsinnode = c(10))
# Modell trainieren
set.seed(64)
gbmFit1 <- train(popularity ~ .,  # . = Alle Features
data = training,
method = "gbm", # Gradient Boosting Machine
trControl = fitControl,
## This last option is actually one
## for gbm() that passes through
verbose = TRUE,
tuneGrid = gbmGrid)
gbmFit1
