return(splitted_artists[1])
}
values <- get_first_values("['7dGJo4pcD2V6oG8kP0tJRR', '2XnnxQzxFZG8qEPjakokPM']")[1]
lapply(train$id_artists[1:100], get_first_values)
values <- get_first_values("['7dGJo4pcD2V6oG8kP0tJRR', '2XnnxQzxFZG8qEPjakokPM']")[1]
get_first_values("['7dGJo4pcD2V6oG8kP0tJRR', '2XnnxQzxFZG8qEPjakokPM']")[1]
get_first_values("['7dGJo4pcD2V6oG8kP0tJRR', '2XnnxQzxFZG8qEPjakokPM']")
sapply(train$id_artists[1:100], get_first_values)
test_train <- train %>%
mutate(first_artist_id = sapply(train$id_artists[1:100], get_first_values))
test_train <- train
test_train$first_artist_id <- sapply(train$id_artists[1:100], get_first_values)
test_train$first_artist_id <- sapply(train$id_artists, get_first_values)
View(test_train)
test_train <- train %>%
mutate(first_artist_id = sapply(train$id_artists, get_first_values))
first_artist_ids <- sapply(train$id_artists, get_first_values)
test_train <- train %>%
mutate(first_artist_id = first_artist_ids)
View(test_train)
# Add all the calculated Features
X_train <- train %>%
mutate(id_artist = first_artist_ids)
rm(test_train)
View(X_train)
colnames(train)
# Add all the calculated Features
X_train <- train %>%
select(id, name, duration_ms, artists, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day) %>%
mutate(id_artist = first_artist_ids)
# Add all the calculated Features
X_train <- train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day) %>%
mutate(id_artist = first_artist_ids)
View(X_train)
View(artists)
# Join the Artist Features
X_train <- X_train %>%
left_join(by = c("id_artist" = "id"))
# Join the Artist Features
X_train <- X_train %>%
left_join(artists, by = c("id_artist" = "id"))
colnames(X_train)
# Add all the calculated Features
X_train <- train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day) %>%
mutate(id_artist = first_artist_ids)
# Join the Artist Features
X_train <- X_train %>%
left_join(artists, by = c("id_artist" = "id")) %>%
select(-c(id_artist, name))
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(artists, by = c("id_artist" = "id")) %>%
select(-c(id_artist, name))
# Add all the calculated Features
X_train <- train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day) %>%
mutate(id_artist = first_artist_ids)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(artists, by = c("id_artist" = "id")) %>%
select(-c(id_artist, name))
View(artists)
# 2.1. Edit Train Data
# -- Split Artists Column and return the first given Artist ID
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_artists[returned_nr])
}
first_artist_ids <- sapply(train$id_artists, ~get_first_value_from_string(.X, 1))
first_artist_ids <- sapply(train$id_artists, ~get_first_value_from_string(.x, 1))
first_artist_ids <- sapply(train$id_artists, get_first_value_from_string, returned_nr = 1)
# 2.1. Edit Train Data
# -- Split Artists Column and return the first given Artist ID
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_artists[returned_nr])
}
# 2.1. Edit Train Data
# -- Split Artists Column and return the first given Artist ID
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_string[returned_nr])
}
first_artist_ids <- sapply(train$id_artists, get_first_value_from_string, returned_nr = 1)
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
# Helper Function for getting a specific value from the string-arrays in the data
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_string[returned_nr])
}
first_artist_genre <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
edit_train <- train
# -- Split Artists Column and return the first given Artist ID
edit_train$id_artists <- sapply(train$id_artists, get_first_value_from_string, returned_nr = 1)
edit_artists$genres <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
rm(first_artist_genre, first_artist_ids)
# 2.2 Edit Artists Data
edit_artists <- artists
edit_artists$genres <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
View(edit_artists)
# Combine all the calculated Features
X_train <- train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day) %>%
mutate(id_artist = first_artist_ids)
# 2.1. Edit Train Data
edit_train <- train
# Helper Function for getting a specific value from the string-arrays in the data
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_string[returned_nr])
}
# -- Split Artists Column and return the first given Artist ID
edit_train$id_artists <- sapply(train$id_artists, get_first_value_from_string, returned_nr = 1)
# Get the first genre Value
edit_artists <- artists
edit_artists$genres <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
# Combine all the calculated Features
X_train <- train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day) %>%
mutate(id_artist = first_artist_ids)
# Combine all the calculated Features
X_train <- train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(artists, by = c("id_artist" = "id")) %>%
select(-c(id_artist, name))
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(artists, by = c("id_artist" = "id")) %>%
select(-c(id_artists, name))
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
View(X_train)
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name, artists,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
View(edit_train)
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo, release_year, release_month, release_day, id_artists)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
View(X_train_artists)
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
unique(edit_artists$genres)
count(edit_artists$genres)
table(edit_artists$genres)
test <- edit_artists %>%
count(genres)
View(test)
# => Too many genres available, too many have missing values. Drop feature
edit_artists <- edit_artists %>%
select(-genres)
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
View(train)
# 2.1. Edit Train Data
edit_train <- train
# Helper Function for getting a specific value from the string-arrays in the data
get_first_value_from_string <- function(str, returned_nr) {
cleaned_string <- str %>%
str_replace_all('[\\[\\]"]', "") %>%
str_replace_all("'", "")
splitted_string <- cleaned_string %>%
str_split(",") %>%
unlist()
return(splitted_string[returned_nr])
}
# -- Split Artists Column and return the first given Artist ID
edit_train$id_artists <- sapply(train$id_artists, get_first_value_from_string, returned_nr = 1)
# Get the first genre Value
edit_artists <- artists
edit_artists$genres <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
count_genres <- edit_artists %>%
count(genres)
# => Too many genres available, too many have missing values. Drop feature
edit_artists <- edit_artists %>%
select(-genres)
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X_train_artists <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
# Join the Artist Features
X_train <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
edit_artists <- edit_artists %>%
select(-genres) %>%
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
edit_artists <- edit_artists %>%
select(-genres) %>%
rename("artist_popularity" = "popularity")
# Edit categorical genres
count_genres <- edit_artists %>%
count(genres)
# Get the first genre Value
edit_artists <- artists
edit_artists$genres <- sapply(artists$genres, get_first_value_from_string, returned_nr = 1)
edit_artists <- edit_artists %>%
select(-genres) %>%
rename("artist_popularity" = "popularity")
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X_train <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
ggplot(X_traing, aes(popularity, duration_ms)) +
geom_point()
ggplot(X_train, aes(popularity, duration_ms)) +
geom_point()
ggplot(X_train, aes(popularity, duration_ms)) +
geom_point(alpha = 0.3)
ggplot(X_train, aes(duration_ms)) +
geom_hist()
ggplot(X_train, aes(duration_ms)) +
geom_histogrm()
ggplot(X_train, aes(duration_ms)) +
geom_histogram()
colnames(X_train)
ggplot(X_train, (y = popularity, x = danceability)) +
geom_point(alpha = 0.5)
ggplot(X_train, (y = popularity, x = danceability)) +
geom_point(alpha = 0.5)
ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.5)
ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1)
ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
ggplot(X_train, aes(y = popularity, x = energy)) +
geom_point(alpha = 0.1) +
geom_smooth()
colnames(X_train)
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_energy <- ggplot(X_train, aes(y = popularity, x = energy)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_loud <- ggplot(X_train, aes(y = popularity, x = loudness)) +
geom_point(alpha = 0.1) +
geom_smooth()
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
library(ggplot2)
library(ggpubr)
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_energy <- ggplot(X_train, aes(y = popularity, x = energy)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
# Libraries
library(tidyverse)
install.packages(c("ape", "backports", "BH", "bitops", "blob", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "DescTools", "digest", "dplyr", "DT", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "fs", "generics", "GGally", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "modelr", "mvtnorm", "network", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reprex", "reshape2", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "Rttf2pt1", "rvest", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ape", "backports", "BH", "bitops", "blob", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "DescTools", "digest", "dplyr", "DT", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "fs", "generics", "GGally", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "modelr", "mvtnorm", "network", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reprex", "reshape2", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "Rttf2pt1", "rvest", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2"))
install.packages(c("ape", "backports", "BH", "bitops", "blob", "boot", "callr", "class", "cli", "clipr", "cluster", "codetools", "colorspace", "cpp11", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "DescTools", "digest", "dplyr", "DT", "ellipsis", "expm", "fansi", "farver", "fastmap", "forcats", "fs", "generics", "GGally", "haven", "hexbin", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "KernSmooth", "knitr", "labeling", "later", "lattice", "lifecycle", "lubridate", "magrittr", "MASS", "Matrix", "mgcv", "mime", "modelr", "mvtnorm", "network", "nlme", "nnet", "openssl", "packrat", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "processx", "promises", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "reprex", "reshape2", "rmarkdown", "rprojroot", "rsconnect", "rstudioapi", "Rttf2pt1", "rvest", "scales", "shiny", "spatial", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xfun", "xml2"))
library(tidyverse)
library(readr)
install.packages(c("data.table", "later", "network"))
# Libraries
library(tidyverse)
library(readr)
# Libraries
library(tidyverse)
library(readr)
library(ggpubr)
library(ggpubr)
gg_dance <- ggplot(X_train, aes(y = popularity, x = danceability)) +
geom_point(alpha = 0.1) +
geom_smooth()
gg_dance
library(caret)
install.packages("caret")
library(caret)
?createDataPartition
createFolds(X_train, k = 5, p = 0.8)
createFolds(X_train, k = 5,)
createFolds(X_train, k = 5)
createFolds(X_train, k = 10)
createFolds(X_train, k = 3)
ncol(X_train)
nrow(X_train+)
nrow(X_train)
createFolds(nrow(X_train), k = 3)
rnorm(21)
createFolds(rnorm(21), k = 3)
1:nrow(X_train)
createFolds(1:nrow(X_train), k = 3)
createFolds(1:nrow(X_train), k = 5)
for(x in folds){
print(x)
}
folds <- createFolds(1:nrow(X_train), k = 5)
for(x in folds){
print(x)
}
for(x in folds){
print(X_train[x])
}
for(x in folds){
print(X_train[,:x])
}
for(x in folds){
print(X_train[:x])
}
for(x in folds){
print(X_train[,x])
}
for(x in folds){
print(X_train[x,])
}
# Combine all the calculated Features
X_train <- edit_train %>%
select(#id, name,
popularity,
duration_ms, danceability, energy, key,
loudness, speechiness, acousticness, instrumentalness, liveness,
valence, tempo,
release_year, #release_month, release_day,
id_artists)
# Join the Artist Features
X <- X_train %>%
left_join(edit_artists, by = c("id_artists" = "id")) %>%
select(-c(id_artists, name))
f_index == 1:nrow(X)
f_index == 1:nrow(X)
for(f_index in folds){
X_train <- X[f_index,]
f_index == 1:nrow(X)
}
for(f_index in folds){
X_train <- X[f_index,]
print(f_index == 1:nrow(X))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train)
}
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print("Got Split with", head(f_index))
}
head(f_index)
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(concat("Got Split with", head(f_index)))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(paste("Got Split with", head(f_index)))
}
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(paste("Got Split with", paste(head(f_index))))
}
paste(head(f_index))
paste(unlist(head(f_index)))
head(f_index)
paste0(head(f_index))
print(paste("Got Split with", head(f_index)))
head(f_index)
unlist(head(f_index))
paste(head(f_index), collapse = "-")
print(paste("Got Split with", paste(head(f_index), collapse = "-")))
for(f_index in folds){
X_train <- X[f_index,]
x_test <- X %>%
anti_join(X_train, by = colnames(X_train))
print(paste("Got Split with", paste(head(f_index), collapse = "-")))
}
